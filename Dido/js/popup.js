// Dido - Extrator de Leads de Mapas (Vers√£o Gratuita)
// Removido sistema de licenciamento e limita√ß√µes

document.addEventListener('DOMContentLoaded', function() {
    const root = document.getElementById('root');
    
    // Interface simples e funcional
    root.innerHTML = `
        <div style="padding: 16px; font-family: Arial, sans-serif; width: 300px;">
            <div style="text-align: center; margin-bottom: 20px;">
                <h2 style="color: #1976d2; margin: 0;">üó∫Ô∏è Dido</h2>
                <p style="color: #666; margin: 5px 0; font-size: 14px;">Extrator de Leads de Mapas</p>
            </div>
            
            <div id="status" style="text-align: center; margin-bottom: 15px;">
                <div id="recordCount" style="font-size: 18px; font-weight: bold; color: #1976d2;">
                    Carregando...
                </div>
                <div id="statusText" style="font-size: 12px; color: #666; margin-top: 5px;">
                    Registros coletados
                </div>
            </div>
            
            <div style="display: flex; flex-direction: column; gap: 10px;">
                <button id="exportBtn" style="
                    background: #1976d2; 
                    color: white; 
                    border: none; 
                    padding: 10px; 
                    border-radius: 5px; 
                    cursor: pointer;
                    font-size: 14px;
                ">
                    üìä Exportar Excel
                </button>
                
                <button id="clearBtn" style="
                    background: #f44336; 
                    color: white; 
                    border: none; 
                    padding: 10px; 
                    border-radius: 5px; 
                    cursor: pointer;
                    font-size: 14px;
                ">
                    üóëÔ∏è Limpar Dados
                </button>
                
                <button id="helpBtn" style="
                    background: #4caf50; 
                    color: white; 
                    border: none; 
                    padding: 10px; 
                    border-radius: 5px; 
                    cursor: pointer;
                    font-size: 14px;
                ">
                    ‚ùì Como Usar
                </button>
                
                <button id="testBtn" style="
                    background: #ff9800; 
                    color: white; 
                    border: none; 
                    padding: 10px; 
                    border-radius: 5px; 
                    cursor: pointer;
                    font-size: 14px;
                ">
                    üîß Testar Extra√ß√£o
                </button>
            </div>
            
            <div id="info" style="
                margin-top: 15px; 
                padding: 10px; 
                background: #f5f5f5; 
                border-radius: 5px; 
                font-size: 12px; 
                color: #666;
            ">
                <strong>üí° Dica:</strong> Navegue pelo Google Maps ou Bing Maps. 
                Os dados dos neg√≥cios visitados ser√£o coletados automaticamente!
            </div>
        </div>
    `;
    
    // Fun√ß√µes principais
    async function updateRecordCount() {
        try {
            const result = await chrome.storage.local.get(['found_records']);
            const records = result.found_records || {};
            const count = Object.keys(records).length;
            
            document.getElementById('recordCount').textContent = count;
            document.getElementById('statusText').textContent = 
                count === 1 ? 'registro coletado' : 'registros coletados';
                
            // Atualizar badge da extens√£o
            chrome.action.setBadgeText({ text: count > 0 ? count.toString() : '' });
            chrome.action.setBadgeBackgroundColor({ color: '#1976d2' });
            
        } catch (error) {
            console.error('Erro ao atualizar contagem:', error);
            document.getElementById('recordCount').textContent = 'Erro';
        }
    }
    
    // Fun√ß√£o para verificar se a biblioteca XLSX est√° carregada
    function checkXLSXLibrary() {
        return typeof XLSX !== 'undefined' && XLSX.utils && XLSX.utils.json_to_sheet;
    }
    
    // Fun√ß√£o para exportar em CSV como fallback
    function exportToCSV(dataArray) {
        try {
            // Criar cabe√ßalhos
            const headers = Object.keys(dataArray[0]);
            const csvContent = [
                headers.join(','),
                ...dataArray.map(row => 
                    headers.map(header => {
                        const value = row[header] || '';
                        // Escapar aspas e v√≠rgulas
                        return `"${value.toString().replace(/"/g, '""')}"`;
                    }).join(',')
                )
            ].join('\n');
            
            // Criar arquivo CSV
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', `dido_leads_${new Date().toISOString().split('T')[0]}.csv`);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
            
            return true;
        } catch (error) {
            console.error('Erro ao exportar CSV:', error);
            return false;
        }
    }
    
    async function exportData() {
        try {
            const result = await chrome.storage.local.get(['found_records']);
            const records = result.found_records || {};
            
            if (Object.keys(records).length === 0) {
                alert('Nenhum dado para exportar! Navegue pelo Google Maps ou Bing Maps primeiro.');
                return;
            }
            
            // Converter objetos para array de dados
            const dataArray = Object.values(records).map(record => {
                // Fun√ß√£o para extrair telefone de diferentes campos (APENAS CELULARES)
                const extractPhone = (record) => {
                    // Tentar diferentes campos de telefone primeiro
                    const phoneFields = [
                        record.phone_number,
                        record.phone,
                        record.international_phone_number,
                        record.phone_numbers && record.phone_numbers[0]
                    ];
                    
                    for (const phone of phoneFields) {
                        if (phone && phone.trim()) {
                            // Verificar se √© celular (come√ßa com 9)
                            const cleanPhone = phone.trim().replace(/\D/g, ''); // Remove tudo que n√£o √© d√≠gito
                            if (cleanPhone.length >= 10 && cleanPhone.charAt(2) === '9') {
                                // Formatar como celular: (XX) 9XXXX-XXXX
                                const ddd = cleanPhone.substring(0, 2);
                                const number = cleanPhone.substring(2);
                                if (number.length === 9) {
                                    return `(${ddd}) ${number.substring(0, 5)}-${number.substring(5)}`;
                                }
                            }
                        }
                    }
                    
                    // Se n√£o encontrou telefone nos campos espec√≠ficos, procurar no endere√ßo
                    const address = record.fulladdr || record.address || '';
                    if (address) {
                        // Regex para detectar APENAS celulares brasileiros (9XXXX-XXXX)
                        const cellphoneRegex = /\((\d{2})\)\s*(9\d{4})-?(\d{4})/g;
                        const match = cellphoneRegex.exec(address);
                        if (match) {
                            return `(${match[1]}) ${match[2]}-${match[3]}`;
                        }
                        
                        // Regex alternativo para celulares com espa√ßos: (XX) 9XXXX XXXX
                        const cellphoneRegex2 = /\((\d{2})\)\s*(9\d{4})\s*(\d{4})/g;
                        const match2 = cellphoneRegex2.exec(address);
                        if (match2) {
                            return `(${match2[1]}) ${match2[2]}-${match2[3]}`;
                        }
                    }
                    
                    return '';
                };
                
                // Fun√ß√£o para extrair endere√ßo limpo (sem telefone celular)
                const extractAddress = (record) => {
                    let address = record.fulladdr || record.address || '';
                    
                    // Remover APENAS celulares usando regex
                    // Padr√£o: (XX) 9XXXX-XXXX (apenas celulares)
                    address = address.replace(/\((\d{2})\)\s*(9\d{4})-?(\d{4})/g, '');
                    
                    // Remover celulares com espa√ßos: (XX) 9XXXX XXXX
                    address = address.replace(/\((\d{2})\)\s*(9\d{4})\s*(\d{4})/g, '');
                    
                    // Limpar v√≠rgulas extras e espa√ßos
                    address = address.replace(/,\s*,/g, ','); // V√≠rgulas duplas
                    address = address.replace(/,\s*$/g, ''); // V√≠rgula no final
                    address = address.replace(/^\s*,/g, ''); // V√≠rgula no in√≠cio
                    address = address.replace(/\s+/g, ' '); // M√∫ltiplos espa√ßos
                    
                    return address.trim();
                };
                
                return {
                    'Nome': record.name || '',
                    'Telefone': extractPhone(record),
                    'Categoria': record.primary_category || (record.categories && record.categories[0]) || '',
                    'Endere√ßo': extractAddress(record),
                    'Website': record.url || record.website || '',
                    'Avalia√ß√£o': record.rating || '',
                    'Avalia√ß√µes': record.reviews || '',
                    'Categorias': record.categories ? record.categories.join(', ') : '',
                    'Latitude': record.latitude || '',
                    'Longitude': record.longitude || '',
                    'URL da Listagem': record.listing_url || '',
                    'Reivindicado': record.claimed || '',
                    'Data de Coleta': new Date(record.created_at).toLocaleDateString('pt-BR'),
                    'Query de Busca': record.query || '',
                    'UUID': record.uuid || ''
                };
            });
            
            // Verificar se a biblioteca XLSX est√° dispon√≠vel
            if (checkXLSXLibrary()) {
                // Exportar para Excel
                const worksheet = XLSX.utils.json_to_sheet(dataArray);
                
                // Ajustar largura das colunas
                const columnWidths = [
                    { wch: 30 }, // Nome
                    { wch: 20 }, // Telefone
                    { wch: 20 }, // Categoria
                    { wch: 40 }, // Endere√ßo
                    { wch: 30 }, // Website
                    { wch: 10 }, // Avalia√ß√£o
                    { wch: 10 }, // Avalia√ß√µes
                    { wch: 30 }, // Categorias
                    { wch: 12 }, // Latitude
                    { wch: 12 }, // Longitude
                    { wch: 40 }, // URL da Listagem
                    { wch: 12 }, // Reivindicado
                    { wch: 15 }, // Data de Coleta
                    { wch: 30 }, // Query de Busca
                    { wch: 25 }  // UUID
                ];
                worksheet['!cols'] = columnWidths;
                
                // Criar workbook
                const workbook = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(workbook, worksheet, 'Leads Coletados');
                
                // Gerar arquivo Excel
                const fileName = `dido_leads_${new Date().toISOString().split('T')[0]}.xlsx`;
                XLSX.writeFile(workbook, fileName);
                
            } else {
                // Fallback para CSV se XLSX n√£o estiver dispon√≠vel
                console.warn('Biblioteca XLSX n√£o encontrada, exportando como CSV');
                if (exportToCSV(dataArray)) {
                    alert('Biblioteca Excel n√£o carregada. Dados exportados como CSV (.csv) que pode ser aberto no Excel.');
                } else {
                    throw new Error('Falha ao exportar dados');
                }
            }
            
        } catch (error) {
            console.error('Erro ao exportar:', error);
            alert('Erro ao exportar dados! Tente recarregar a extens√£o.');
        }
    }
    
    async function clearData() {
        if (confirm('Tem certeza que deseja limpar todos os dados coletados?')) {
            try {
                await chrome.storage.local.set({ found_records: {} });
                await updateRecordCount();
                alert('Dados limpos com sucesso!');
            } catch (error) {
                console.error('Erro ao limpar dados:', error);
                alert('Erro ao limpar dados!');
            }
        }
    }
    
    function showHelp() {
        alert(`üó∫Ô∏è Dido - Como Usar:

1. Navegue pelo Google Maps (maps.google.com) ou Bing Maps (bing.com/maps)
2. Fa√ßa buscas por neg√≥cios (ex: "restaurantes em S√£o Paulo")
3. Clique nos resultados para visualizar os detalhes
4. Os dados ser√£o coletados automaticamente
5. Use "Exportar Excel" para baixar uma planilha Excel (.xlsx)
6. Use "Limpar Dados" para remover todos os registros

‚úÖ 100% Gratuito e Sem Limita√ß√µes!
‚úÖ Funciona com Google Maps e Bing Maps
‚úÖ Coleta: nome, endere√ßo, telefone, website, avalia√ß√µes, etc.
‚úÖ Exporta em Excel com colunas organizadas!`);
    }
    
    async function testExtraction() {
        try {
            const result = await chrome.storage.local.get(['found_records']);
            const records = result.found_records || {};
            
            if (Object.keys(records).length === 0) {
                alert('Nenhum dado para testar! Navegue pelo Google Maps ou Bing Maps primeiro.');
                return;
            }
            
            // Pegar o primeiro registro para teste
            const firstRecord = Object.values(records)[0];
            
            // Fun√ß√£o de teste (c√≥pia das fun√ß√µes de extra√ß√£o - APENAS CELULARES)
            const extractPhone = (record) => {
                const phoneFields = [
                    record.phone_number,
                    record.phone,
                    record.international_phone_number,
                    record.phone_numbers && record.phone_numbers[0]
                ];
                
                for (const phone of phoneFields) {
                    if (phone && phone.trim()) {
                        // Verificar se √© celular (come√ßa com 9)
                        const cleanPhone = phone.trim().replace(/\D/g, ''); // Remove tudo que n√£o √© d√≠gito
                        if (cleanPhone.length >= 10 && cleanPhone.charAt(2) === '9') {
                            // Formatar como celular: (XX) 9XXXX-XXXX
                            const ddd = cleanPhone.substring(0, 2);
                            const number = cleanPhone.substring(2);
                            if (number.length === 9) {
                                return `(${ddd}) ${number.substring(0, 5)}-${number.substring(5)}`;
                            }
                        }
                    }
                }
                
                const address = record.fulladdr || record.address || '';
                if (address) {
                    // Regex para detectar APENAS celulares brasileiros (9XXXX-XXXX)
                    const cellphoneRegex = /\((\d{2})\)\s*(9\d{4})-?(\d{4})/g;
                    const match = cellphoneRegex.exec(address);
                    if (match) {
                        return `(${match[1]}) ${match[2]}-${match[3]}`;
                    }
                }
                
                return '';
            };
            
            const extractAddress = (record) => {
                let address = record.fulladdr || record.address || '';
                // Remover APENAS celulares usando regex
                address = address.replace(/\((\d{2})\)\s*(9\d{4})-?(\d{4})/g, '');
                address = address.replace(/\((\d{2})\)\s*(9\d{4})\s*(\d{4})/g, '');
                address = address.replace(/,\s*,/g, ',');
                address = address.replace(/,\s*$/g, '');
                address = address.replace(/^\s*,/g, '');
                address = address.replace(/\s+/g, ' ');
                return address.trim();
            };
            
            const extractedPhone = extractPhone(firstRecord);
            const extractedAddress = extractAddress(firstRecord);
            
            alert(`üîß Teste de Extra√ß√£o (APENAS CELULARES):

üìã Dados Originais:
Nome: ${firstRecord.name || 'N/A'}
Endere√ßo Original: ${firstRecord.fulladdr || firstRecord.address || 'N/A'}

üì± Resultado da Extra√ß√£o:
Celular Extra√≠do: ${extractedPhone || 'N√ÉO ENCONTRADO (apenas celulares)'}
Endere√ßo Limpo: ${extractedAddress || 'N/A'}

${extractedPhone ? '‚úÖ Celular extra√≠do com sucesso!' : '‚ùå Celular n√£o encontrado (ignora telefones fixos)'}`);
            
        } catch (error) {
            console.error('Erro no teste:', error);
            alert('Erro ao testar extra√ß√£o!');
        }
    }
    
    // Event listeners
    document.getElementById('exportBtn').addEventListener('click', exportData);
    document.getElementById('clearBtn').addEventListener('click', clearData);
    document.getElementById('helpBtn').addEventListener('click', showHelp);
    document.getElementById('testBtn').addEventListener('click', testExtraction);
    
    // Atualizar contagem inicial e a cada mudan√ßa no storage
    updateRecordCount();
    chrome.storage.onChanged.addListener((changes) => {
        if (changes.found_records) {
            updateRecordCount();
        }
    });
    
    // Atualizar a cada 2 segundos para garantir sincroniza√ß√£o
    setInterval(updateRecordCount, 2000);
});
